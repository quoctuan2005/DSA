#include <iostream>
using namespace std;

class SinglyLinkedListNode
{
public:
    int data;
    SinglyLinkedListNode *next;

    SinglyLinkedListNode(int node_data)
    {
        this->data = node_data;
        this->next = nullptr;
    }
};

class SinglyLinkedList
{
public:
    SinglyLinkedListNode *head;
    SinglyLinkedListNode *tail;

    SinglyLinkedList()
    {
        this->head = nullptr;
        this->tail = nullptr;
    }

    void insert_node(int node_data)
    {
        SinglyLinkedListNode *node = new SinglyLinkedListNode(node_data);

        if (!this->head)
        {
            this->head = node;
        }
        else
        {
            this->tail->next = node;
        }

        this->tail = node;
    }
};

void print_singly_linked_list(SinglyLinkedListNode *node, string sep)
{
    while (node)
    {
        cout << node->data;

        node = node->next;

        if (node)
        {
            cout << sep;
        }
    }
    cout << endl;
}

void free_singly_linked_list(SinglyLinkedListNode *node)
{
    while (node)
    {
        SinglyLinkedListNode *temp = node;
        node = node->next;

        free(temp);
    }
}

SinglyLinkedListNode *reverse(SinglyLinkedListNode *llist)
{
    vector<SinglyLinkedListNode *> vec;
    while (llist)
    {
        vec.push_back(llist);
        llist = llist->next;
    }
    reverse(vec.begin(), vec.end());

    for (int i = 0; i < vec.size() - 1; i++)
    {
        vec[i]->next = vec[i + 1];
    }
    vec[vec.size() - 1]->next = nullptr;
    return vec[0];
}

int main()
{
    int tests;
    cout << "Nhập số lượng test: ";
    cin >> tests;

    for (int tests_itr = 0; tests_itr < tests; tests_itr++)
    {
        SinglyLinkedList *llist = new SinglyLinkedList();

        int llist_count;
        cout << "Nhập số lượng phần tử của danh sách liên kết: ";
        cin >> llist_count;

        for (int i = 0; i < llist_count; i++)
        {
            int llist_item;
            cout << "Nhập phần tử thứ " << i + 1 << ": ";
            cin >> llist_item;
            llist->insert_node(llist_item);
        }

        SinglyLinkedListNode *llist1 = reverse(llist->head);

        cout << "Danh sách sau khi đảo ngược: ";
        print_singly_linked_list(llist1, " ");

        // Giải phóng bộ nhớ
        free_singly_linked_list(llist1);
    }

    return 0;
}
